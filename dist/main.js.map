{"version":3,"file":"main.js","mappings":"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","sources":["webpack://spiders/./src/scripts/board.js","webpack://spiders/./src/scripts/spider.js","webpack://spiders/./src/scripts/helper_functions.js","webpack://spiders/./src/scripts/spiders.js","webpack://spiders/./src/scripts/player.js","webpack://spiders/./src/scripts/bullet.js","webpack://spiders/./src/scripts/obstacle.js","webpack://spiders/./src/scripts/obstacles.js","webpack://spiders/./src/scripts/pause.js","webpack://spiders/./src/scripts/gameover.js","webpack://spiders/./src/scripts/game-view.js","webpack://spiders/./src/scripts/startgame.js","webpack://spiders/./src/index.js"],"sourcesContent":["class Board{\n    constructor(options){\n        this.color = 'black';\n    }\n\n    draw(ctx){\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, 700, 700);\n    }\n\n    drawLine(ctx){\n        ctx.fillStyle = \"gray\"\n        ctx.fillRect(0, 640, 700, 1);\n\n    }\n}\n\nexport default Board","export default class Spider{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.x_move = 2 * options.direction;\n        this.image = new Image();\n        this.image.src = './src/assets/centipede.png';\n\n    }\n\n    draw = function(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 20, 20);\n    }\n\n    move() {\n        this.x += this.x_move;\n    }\n\n    update() {\n        this.x_move = -this.x_move;\n        this.y += 20;\n    }\n}","export function setIntervalX(callback, delay, repetitions) {\n    var x = 0;\n    var intervalID = window.setInterval(function () {\n\n       callback();\n\n       if (++x === repetitions) {\n           window.clearInterval(intervalID);\n       }\n    }, delay);\n}\n\n\nexport function getRandomInt(min, max) {\n    return Math.ceil((Math.random() * (max - min) + min) / 20) * 20;\n}\n \nexport function getDistance(xpos1, ypos1, xpos2, ypos2) {\n    let result = Math.sqrt(Math.pow(xpos2 - xpos1, 2) + Math.pow(ypos2 - ypos1, 2));\n    return result;\n}\n\nexport function getHorizontalDistance(xpos1, ypos1, xpos2, ypos2) {\n    if (ypos1 === ypos2) {\n        if (xpos1 < xpos2) {\n        return xpos2 - xpos1;\n            \n        } else if (xpos1 >= xpos2){\n        return xpos2 - xpos1;\n        }\n    }\n}\n\nexport function getRandom(max) {\n    return Math.floor(Math.random() * max);\n  }","import Spider from \"./spider\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Spiders {\n    constructor(options) {\n        this.x = helper_functions.getRandomInt(200, 500);\n        this.y = 0;\n        this.spiders = [];\n        this.direction = Math.pow(-1, helper_functions.getRandom(2));\n\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 10; i++) {\n            const newSpider = new Spider({\n                x: this.x + 20 * i * this.direction,\n                y: this.y,\n                direction: this.direction\n            })\n\n            this.spiders.push(newSpider);\n        }\n    }\n\n    destroy(spider) {\n        const foundIdx = this.spiders.indexOf(spider);\n        this.spiders.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        // console.log(this.spiders.length);\n        this.spiders.forEach(spider => {\n            if (spider.x > 680 || spider.x < 0) {\n                spider.update();\n            }\n            spider.move();\n            spider.draw(ctx);\n        });\n    }\n}\n\n","import Bullet from \"./bullet\";\n\nexport default class Player {\n    constructor(options) {\n        this.x = 350;\n        this.y = 675;\n        this.image = new Image();\n        this.image.src = './src/assets/player.png';\n        this.bullets = [];\n        this.pause = false;\n        this.firing = false;\n\n        this.keyBind();\n    }\n\n    keyBind() {\n        window.addEventListener('keydown', (e) => {\n            if (e.key == \"ArrowLeft\" || e.key == \"a\") {\n                if (this.x > 0)this.x -= 5;\n            } else if (e.key == \"ArrowRight\" || e.key == \"d\") {\n                if (this.x < 675) this.x += 5;\n            }else if (e.key == \"ArrowUp\" || e.key == \"w\") {\n                if (this.y >= 650) this.y -= 5;\n            } else if (e.key == \"ArrowDown\" || e.key == \"s\") {\n                if (this.y < 675) this.y += 5;\n            } else if (e.key == \" \") {\n                if (!this.firing) {\n                    this.firing = true;\n                    const newBullet = new Bullet({\n                        x: this.x, \n                        y: this.y\n                    });\n                    this.bullets.push(newBullet);\n                    \n                    setTimeout(() => {\n                        this.firing = false;\n                    }, 200);\n                }\n            } else if (e.key == \"p\") {\n                this.pause = !this.pause;\n            }\n        }, true);\n    }\n\n    destroy(bullet) {\n        const foundIdx = this.bullets.indexOf(bullet);\n        this.bullets.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 25, 25);\n\n        this.bullets.forEach(bullet => {\n            if (bullet.y <= -10) {\n                this.bullets.shift();\n            } else {\n                bullet.move();\n                bullet.draw(ctx);\n            }\n        });\n    }\n}","class Bullet{\n    constructor (options){\n        this.x = options.x;\n        this.y = options.y;\n        this.color = \"#49fb35\";\n    }\n\n    move() {\n        this.y -= 5;\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x + 10, this.y, 5, 5);\n    }\n}\n\nexport default Bullet;","export default class Obstacle{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.image = new Image();\n        this.image.src = './src/assets/mushroom1.png';\n        this.counter = 0;\n    }\n\n    draw = function(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 20, 20);\n    }\n}","import Obstacle from \"./obstacle\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Obstacles {\n    constructor(options) {\n        this.obstacles = [];\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 35; i++) {\n            const newObstacle = new Obstacle({\n                x: helper_functions.getRandomInt(20, 680),\n                y: helper_functions.getRandomInt(0, 620)\n            })\n\n            if (!this.obstacles.includes(newObstacle)) {\n                this.obstacles.push(newObstacle);\n            }\n        }\n    }\n\n    newBlock(x1, y1) {\n        let x = Math.floor(x1/20)*20;\n        let y = Math.floor(y1/20)*20;\n        const newObstacle = new Obstacle({x: x, y: y});\n        this.obstacles.push(newObstacle)\n    }\n\n    hit(obstacle) {\n        switch (obstacle.counter++) {\n            case 0:\n                obstacle.image.src = './src/assets/mushroom2.png';\n                break;\n            case 1:\n                obstacle.image.src = './src/assets/mushroom3.png';\n                break;\n            case 2:\n                obstacle.image.src = './src/assets/mushroom4.png';\n                break;\n            case 3:\n                this.destroy(obstacle);\n                break;\n        } \n    }\n\n    destroy(obstacle) {\n        const foundIdx = this.obstacles.indexOf(obstacle);\n        this.obstacles.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        this.obstacles.forEach(obstacle => {\n            obstacle.draw(ctx)\n        })\n    }\n}","export default class Pause{\n    constructor(options){\n        this.color = 'brown';\n        this.image = new Image();\n        this.image.src = './src/assets/centipede.png';\n    }\n\n    draw(ctx){\n        ctx.drawImage(this.image, 250, 160, 200, 200);\n\n        ctx.fillStyle = this.color;\n        ctx.font = \"48px SF Atarian System\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"Game Paused\", 350, 400);\n        ctx.font = \"35px SF Atarian System\";\n        ctx.fillText(\"Press 'p' to resume game\", 350, 440);\n        // ctx.fillRect(0, 0, 700, 700);\n    }\n}\n\n","export default class GameOver{\n    constructor(options){\n        this.color = 'brown';\n        this.image = new Image();\n        this.image.src = './src/assets/character.png';\n    }\n\n    draw(ctx){\n        ctx.drawImage(this.image, 265, 160, 200, 200);\n\n        ctx.fillStyle = this.color;\n        ctx.font = \"48px SF Atarian System\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"Game Over\", 350, 400);\n        ctx.font = \"35px SF Atarian System\";\n        ctx.fillText(\"Press 'CTRL + R' to restart the game\", 350, 440);\n        // ctx.fillRect(0, 0, 700, 700);\n    }\n}\n\n","import Board from \"./board.js\";\nimport Spiders from \"./spiders.js\";\nimport Player from './player';\nimport Obstacles from \"./obstacles.js\";\nimport Pause from \"./pause.js\";\nimport GameOver from \"./gameover.js\";\nimport { getDistance, getHorizontalDistance } from \"./helper_functions\";\n\nexport default class GameView {\n    constructor(options) {\n        this.board = new Board();\n        this.board2 = new Board();\n        this.spiders = new Spiders();\n        this.player = new Player();\n        this.obstacles = new Obstacles();\n        this.pause = new Pause();\n        this.gameove = new GameOver();\n        this.points = 0;\n        this.gamestatus = \"active\"\n        this.userpoints = document.getElementById(\"playerscore\");\n    }\n    \n\n    checkCollision() {\n        this.player.bullets.forEach(bullet => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist <= 10) {\n                    this.obstacles.hit(obstacle);\n                    this.points++;\n                    this.player.destroy(bullet);\n                }\n            });\n\n            this.spiders.spiders.forEach(spider => {\n                const [x1, y1] = [spider.x, spider.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist <= 10) {\n                    this.spiders.destroy(spider);\n                    this.player.destroy(bullet);\n                    this.obstacles.newBlock(x1, y1);\n                    this.points += 10;\n                    if (this.spiders.spiders.length === 0) {\n                        this.points += 100;\n                        alert(\"LEVEL PASS\");  // pass recursive game() with variables for next level\n                    }\n                } \n            })\n        });\n\n        this.spiders.spiders.forEach(spider => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y]; \n                const [x2, y2] = [spider.x, spider.y];\n                const dist = getHorizontalDistance(x1, y1, x2, y2);\n                if (dist >= 0 && dist <= 20) {\n                    spider.y += 20;\n                    spider.x_move = -spider.x_move\n                } else if (dist >= -20 && dist <= 0) {\n                    spider.y += 20;\n                    spider.x_move = -spider.x_move\n\n                }\n            });\n\n            this.spiders.spiders.forEach(spider2 => {\n                const [x1, y1] = [spider.x, spider.y];\n                const [x2, y2] = [spider2.x, spider2.y];\n                const dist = getHorizontalDistance(x1, y1, x2, y2);\n                if (spider != spider2 && y1 === y2 && dist % 20 != 0) {\n                    spider.y += 20;\n                }\n            })\n\n        });\n\n    }\n\n    gameover() {\n        this.spiders.spiders.forEach(spider => {\n            if (spider.y > 620) {\n                window.cancelAnimationFrame\n                this.gamestatus = \"over\"\n            }\n        });\n    }\n    \n    draw(ctx) {\n        this.userpoints.textContent = `SCORE: ${this.points}`;\n        ctx.clearRect(0, 0, 700, 700);\n\n        if (this.player.pause) {\n                this.pause.draw(ctx);\n        } else if (this.gamestatus === \"over\") {\n            this.gameove.draw(ctx);\n        } else {\n            this.board.draw(ctx);\n            this.board2.drawLine(ctx);\n            this.obstacles.draw(ctx);\n            this.player.draw(ctx);\n            this.spiders.draw(ctx);\n            this.checkCollision();\n            this.gameover();\n        }\n\n        requestAnimationFrame(this.draw.bind(this, ctx));\n    }\n    \n}","export default class StartGame{\n    constructor(options){\n        this.color = 'brown';\n        this.image = new Image();\n        this.image.src = './src/assets/centipede.png';\n    }\n\n    draw(ctx){\n        ctx.drawImage(this.image, 250, 160, 200, 200);\n\n        ctx.fillStyle = this.color;\n        ctx.font = \"70px SF Atarian System\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"SPIDERS\", 350, 400);\n        ctx.font = \"35px SF Atarian System\";\n        ctx.fillText(\"Press 'Enter' to start your game\", 350, 440);\n        // ctx.fillRect(0, 0, 700, 700);\n    }\n}\n\n","import GameView from \"../src/scripts/game-view\";\nimport StartGame from \"./scripts/startgame\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    let userpoints = document.getElementById(\"playerscore\");\n    userpoints.textContent = `SCORE: 0`;\n    \n    const canvas = document.getElementById('board-canvas');\n    const ctx = canvas.getContext(\"2d\");\n\n    const startgame = new StartGame();\n    startgame.draw(ctx);\n\n    window.addEventListener('keydown', (e) => {\n        if (e.key === \"Enter\") {\n            const gameview = new GameView()\n            gameview.draw(ctx);\n        }\n    }, true);\n\n\n    \n});"],"names":["constructor","options","this","color","draw","ctx","fillStyle","fillRect","drawLine","Spider","x","y","x_move","direction","image","Image","src","drawImage","move","update","getRandomInt","min","max","Math","ceil","random","getDistance","xpos1","ypos1","xpos2","ypos2","sqrt","pow","getHorizontalDistance","Spiders","helper_functions","spiders","floor","initialize","i","newSpider","push","destroy","spider","foundIdx","indexOf","splice","forEach","Player","bullets","pause","firing","keyBind","window","addEventListener","e","key","newBullet","setTimeout","bullet","shift","Obstacle","counter","Obstacles","obstacles","newObstacle","includes","newBlock","x1","y1","hit","obstacle","Pause","font","textAlign","fillText","GameOver","GameView","board","Board","board2","player","gameove","points","gamestatus","userpoints","document","getElementById","checkCollision","x2","y2","length","alert","dist","spider2","gameover","cancelAnimationFrame","textContent","clearRect","requestAnimationFrame","bind","StartGame","getContext"],"sourceRoot":""}