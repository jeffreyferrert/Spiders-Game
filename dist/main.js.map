{"version":3,"file":"main.js","mappings":"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","sources":["webpack://spiders/./src/scripts/spider.js","webpack://spiders/./src/scripts/helper_functions.js","webpack://spiders/./src/scripts/spiders.js","webpack://spiders/./src/scripts/player.js","webpack://spiders/./src/scripts/bullet.js","webpack://spiders/./src/scripts/obstacle.js","webpack://spiders/./src/scripts/obstacles.js","webpack://spiders/./src/scripts/game-view.js","webpack://spiders/./src/scripts/board.js","webpack://spiders/./src/index.js"],"sourcesContent":["export default class Spider{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.x_move = 5;\n        this.radius = 10;\n        this.color = \"brown\";\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n\n    move() {\n        this.x += this.x_move;\n    }\n\n    update() {\n        this.x_move = -this.x_move;\n        this.y += 20;\n    }\n}","export function setIntervalX(callback, delay, repetitions) {\n    var x = 0;\n    var intervalID = window.setInterval(function () {\n\n       callback();\n\n       if (++x === repetitions) {\n           window.clearInterval(intervalID);\n       }\n    }, delay);\n}\n\n\nexport function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n \nexport function getDistance(xpos1, ypos1, xpos2, ypos2) {\n    let result = Math.sqrt(Math.pow(xpos2 - xpos1, 2) + Math.pow(ypos2 - ypos1, 2));\n    return result;\n}","import Spider from \"./spider\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Spiders {\n    constructor(options) {\n        this.x = helper_functions.getRandomInt(210, 700);\n        this.y = 10;\n        this.color = 'brown';\n        this.spiders = [];\n\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 10; i++) {\n            const newSpider = new Spider({\n                x: this.x - 20 * i,\n                y: this.y \n            })\n\n            this.spiders.push(newSpider);\n        }\n    }\n\n    draw(ctx) {\n        this.spiders.forEach(spider => {\n            if (spider.x >= 700 || spider.x < 0) {\n                spider.update();\n            }\n            spider.move();\n            spider.draw(ctx);\n        });\n\n    }\n}\n\n","import Bullet from \"./bullet\";\n\nexport default class Player {\n    constructor(options) {\n        this.x = 350;\n        this.y = 670;\n        this.color = 'green';\n        this.bullets = [];\n\n        this.keyBind();\n    }\n\n    keyBind() {\n        window.addEventListener('keydown', (e) => {\n            if (e.key == \"ArrowLeft\" || e.key == \"a\") {\n                this.x -= 10;\n            } else if (e.key == \"ArrowRight\" || e.key == \"d\") {\n                this.x += 10;\n            }else if (e.key == \"ArrowUp\" || e.key == \"w\") {\n                this.y -= 10;\n            } else if (e.key == \"ArrowDown\" || e.key == \"s\") {\n                this.y += 10;\n            } else if (e.key == \" \") {\n                const newBullet = new Bullet({\n                    x: this.x, \n                    y: this.y\n                });\n                this.bullets.push(newBullet);\n            }\n        }, true);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x, this.y, 25, 25);\n\n        this.bullets.forEach(bullet => {\n            if (bullet.y <= -10) {\n                this.bullets.shift();\n            } else {\n                bullet.move();\n                bullet.draw(ctx);\n            }\n        });\n    }\n}","class Bullet{\n    constructor (options){\n        this.x = options.x;\n        this.y = options.y;\n        this.color = 'green';\n    }\n\n    move() {\n        this.y -= 10;\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x, this.y, 10, 10);\n    }\n}\n\nexport default Bullet;","export default class Obstacle{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.color = \"gray\";\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color\n        ctx.fillRect(this.x, this.y, 20, 20);\n    }\n}","import Obstacle from \"./obstacle\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Obstacles {\n    constructor(options) {\n        this.obstacles = [];\n\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 20; i++) {\n            const newObstacle = new Obstacle({\n                x: helper_functions.getRandomInt(30, 670), //multiples of 20\n                y: helper_functions.getRandomInt(20, 650)\n            })\n\n            if (!this.obstacles.includes(newObstacle)) {\n                this.obstacles.push(newObstacle);\n            }\n        }\n    }\n\n    destroy(obstacle) {\n        const foundIdx = this.obstacles.indexOf(obstacle);\n        // console.log(foundIdx);\n        this.obstacles.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        this.obstacles.forEach(obstacle => {\n            obstacle.draw(ctx)\n        })\n    }\n}","import Board from \"./board.js\";\nimport Spiders from \"./spiders.js\";\nimport Player from './player';\nimport Obstacles from \"./obstacles.js\";\nimport { getDistance } from \"./helper_functions\";\n\nexport default class GameView {\n    constructor(options) {\n        this.board = new Board();\n        this.spiders = new Spiders();\n        this.player = new Player();\n        this.obstacles = new Obstacles();\n    }\n\n    checkCollision() {\n        this.player.bullets.forEach(bullet => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist < 20) {\n                    // obstacle.color = \"red\";\n                    this.obstacles.destroy(obstacle);\n                }\n            });\n\n        });\n    }\n    \n    draw(ctx) {\n        ctx.clearRect(0, 0, 700, 700);\n\n        this.board.draw(ctx);\n        this.obstacles.draw(ctx);\n        this.player.draw(ctx);\n        this.spiders.draw(ctx);\n\n        this.checkCollision();\n        requestAnimationFrame(this.draw.bind(this, ctx));\n    }\n    \n}","class Board{\n    constructor(options){\n        this.color = 'black';\n    }\n\n    draw(ctx){\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, 700, 700);\n    }\n}\n\nexport default Board","import GameView from \"../src/scripts/game-view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const canvas = document.getElementById('board-canvas');\n    const ctx = canvas.getContext(\"2d\");\n\n    const gameview = new GameView()\n    gameview.draw(ctx);\n\n});\n\n    // console.log(obstacles);\n    // console.log(obstacles.obstacles[0].x);\n    // console.log(obstacles.obstacles[0].y);\n    // console.log(player.x);\n    // console.log(player.y);\n\n    // let xpos1 = obstacles.obstacles[0].x;\n    // let ypos1 = obstacles.obstacles[0].y;\n    // let xpos2 = player.x;\n    // let ypos2 = player.y;\n\n    // let dist = helper_functions.getDistance(xpos1, ypos1, xpos2, ypos2);\n    // // console.log(dist);\n    // if (dist < 30) obstacles.obstacles[0].color = \"red\""],"names":["Spider","constructor","options","this","x","y","x_move","radius","color","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","move","update","getRandomInt","min","max","floor","random","Spiders","helper_functions","spiders","initialize","i","newSpider","push","forEach","spider","Player","bullets","keyBind","window","addEventListener","e","key","newBullet","fillRect","bullet","shift","Obstacle","Obstacles","obstacles","newObstacle","includes","destroy","obstacle","foundIdx","indexOf","splice","GameView","board","player","checkCollision","x1","y1","x2","y2","xpos1","ypos1","xpos2","ypos2","sqrt","pow","clearRect","requestAnimationFrame","bind","document","getElementById","getContext"],"sourceRoot":""}