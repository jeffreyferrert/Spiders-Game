{"version":3,"file":"main.js","mappings":"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","sources":["webpack://spiders/./src/scripts/spider.js","webpack://spiders/./src/scripts/helper_functions.js","webpack://spiders/./src/scripts/spiders.js","webpack://spiders/./src/scripts/player.js","webpack://spiders/./src/scripts/bullet.js","webpack://spiders/./src/scripts/obstacle.js","webpack://spiders/./src/scripts/obstacles.js","webpack://spiders/./src/scripts/game-view.js","webpack://spiders/./src/scripts/board.js","webpack://spiders/./src/index.js"],"sourcesContent":["export default class Spider{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.x_move = 4;\n        this.radius = 10;\n        this.color = \"brown\";\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n\n    move() {\n        this.x += this.x_move;\n    }\n\n    update() {\n        this.x_move = -this.x_move;\n        this.y += 20;\n    }\n}","export function setIntervalX(callback, delay, repetitions) {\n    var x = 0;\n    var intervalID = window.setInterval(function () {\n\n       callback();\n\n       if (++x === repetitions) {\n           window.clearInterval(intervalID);\n       }\n    }, delay);\n}\n\n\nexport function getRandomInt(min, max) {\n    return Math.floor((Math.random() * (max - min) + min) / 20) * 20;\n}\n \nexport function getDistance(xpos1, ypos1, xpos2, ypos2) {\n    let result = Math.sqrt(Math.pow(xpos2 - xpos1, 2) + Math.pow(ypos2 - ypos1, 2));\n    return result;\n}\n\nexport function getHorizontalDistance(xpos1, ypos1, xpos2, ypos2) {\n    if (ypos1 + 10 === ypos2) {\n        if (xpos1 < xpos2) {\n        return xpos2 - xpos1;\n            \n        } else if (xpos1 >= xpos2){\n        return xpos2 - xpos1;\n        }\n    }\n}","import Spider from \"./spider\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Spiders {\n    constructor(options) {\n        this.x = helper_functions.getRandomInt(210, 700);\n        this.y = 10;\n        this.color = 'brown';\n        this.spiders = [];\n\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 10; i++) {\n            const newSpider = new Spider({\n                x: this.x - 20 * i,\n                y: this.y \n            })\n\n            this.spiders.push(newSpider);\n        }\n    }\n\n    destroy(spider) {\n        const foundIdx = this.spiders.indexOf(spider);\n        this.spiders.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        this.spiders.forEach(spider => {\n            if (spider.x >= 700 || spider.x < 0) {\n                spider.update();\n            }\n            spider.move();\n            spider.draw(ctx);\n        });\n    }\n}\n\n","import Bullet from \"./bullet\";\n\nexport default class Player {\n    constructor(options) {\n        this.x = 350;\n        this.y = 670;\n        this.color = 'green';\n        this.bullets = [];\n\n        this.keyBind();\n    }\n\n    keyBind() {\n        window.addEventListener('keydown', (e) => {\n            if (e.key == \"ArrowLeft\" || e.key == \"a\") {\n                this.x -= 10;\n            } else if (e.key == \"ArrowRight\" || e.key == \"d\") {\n                this.x += 10;\n            }else if (e.key == \"ArrowUp\" || e.key == \"w\") {\n                this.y -= 10;\n            } else if (e.key == \"ArrowDown\" || e.key == \"s\") {\n                this.y += 10;\n            } else if (e.key == \" \") {\n                const newBullet = new Bullet({\n                    x: this.x, \n                    y: this.y\n                });\n                this.bullets.push(newBullet);\n            }\n        }, true);\n    }\n\n    destroy(bullet) {\n        const foundIdx = this.bullets.indexOf(bullet);\n        this.bullets.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x, this.y, 25, 25);\n\n        this.bullets.forEach(bullet => {\n            if (bullet.y <= -10) {\n                this.bullets.shift();\n            } else {\n                bullet.move();\n                bullet.draw(ctx);\n            }\n        });\n    }\n}","class Bullet{\n    constructor (options){\n        this.x = options.x;\n        this.y = options.y;\n        this.color = 'green';\n    }\n\n    move() {\n        this.y -= 10;\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x, this.y, 10, 10);\n    }\n}\n\nexport default Bullet;","export default class Obstacle{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.color = \"#003049\";\n        this.counter = 0;\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color\n        ctx.fillRect(this.x, this.y, 20, 20);\n    }\n}","import Obstacle from \"./obstacle\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Obstacles {\n    constructor(options) {\n        this.obstacles = [];\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 20; i++) {\n            const newObstacle = new Obstacle({\n                x: helper_functions.getRandomInt(20, 680), //multiples of 20\n                y: helper_functions.getRandomInt(20, 640)\n            })\n\n            if (!this.obstacles.includes(newObstacle)) {\n                this.obstacles.push(newObstacle);\n            }\n        }\n    }\n\n    hit(obstacle, bullet) {\n        obstacle.counter++;\n        switch (obstacle.counter++) {\n            case 1:\n                obstacle.color = \"#fcbf49\";\n                break;\n            case 3:\n                obstacle.color = \"#f77f00\";\n                break;\n            case 5:\n                obstacle.color = \"#d62828\";\n                break;\n            case 7:\n                this.destroy(obstacle);\n                break;\n        } \n    }\n\n    destroy(obstacle) {\n        const foundIdx = this.obstacles.indexOf(obstacle);\n        this.obstacles.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        this.obstacles.forEach(obstacle => {\n            obstacle.draw(ctx)\n        })\n    }\n}","import Board from \"./board.js\";\nimport Spiders from \"./spiders.js\";\nimport Player from './player';\nimport Obstacles from \"./obstacles.js\";\nimport Obstacle from \"./obstacle.js\";  //crea 1 bloque\nimport { getDistance, getHorizontalDistance } from \"./helper_functions\";\n\nexport default class GameView {\n    constructor(options) {\n        this.board = new Board();\n        this.spiders = new Spiders();\n        this.player = new Player();\n        this.obstacles = new Obstacles();\n    }\n\n    checkCollision() {\n        this.player.bullets.forEach(bullet => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist < 20) {\n                    this.obstacles.hit(obstacle);\n                    this.player.destroy(bullet);\n                }\n            });\n\n            this.spiders.spiders.forEach(spider => {\n                const [x1, y1] = [spider.x, spider.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist < 20) {\n                    this.spiders.destroy(spider);\n                    this.player.destroy(bullet);\n                    this.newBlock(x1, y1);\n                } \n            })\n        });\n\n        this.spiders.spiders.forEach(spider => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y]; \n                const [x2, y2] = [spider.x, spider.y];\n                const dist = getHorizontalDistance(x1, y1, x2, y2);\n                if (dist > 0 && dist < 30) {\n                    console.log('derecha');\n                    spider.y += 20;\n                } else if (dist > -10 && dist < 0) {\n                    console.log('izquierda');\n                    spider.y += 20;\n\n                }\n            })\n        });\n\n    }\n\n    newBlock(x1, y1) {\n        let x = Math.floor(x1/20)*20;\n        let y = Math.floor(y1/20)*20;\n        const newObstacle = new Obstacle({x: x, y: y});\n        this.obstacles.obstacles.push(newObstacle)\n    }\n    \n    draw(ctx) {\n        ctx.clearRect(0, 0, 700, 700);\n\n        this.board.draw(ctx);\n        this.obstacles.draw(ctx);\n        this.player.draw(ctx);\n        this.spiders.draw(ctx);\n\n        this.checkCollision();\n        requestAnimationFrame(this.draw.bind(this, ctx));\n    }\n    \n}","class Board{\n    constructor(options){\n        this.color = 'black';\n    }\n\n    draw(ctx){\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, 700, 700);\n    }\n}\n\nexport default Board","import GameView from \"../src/scripts/game-view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const canvas = document.getElementById('board-canvas');\n    const ctx = canvas.getContext(\"2d\");\n\n    const gameview = new GameView()\n    gameview.draw(ctx);\n\n});"],"names":["Spider","constructor","options","this","x","y","x_move","radius","color","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","move","update","getRandomInt","min","max","floor","random","getDistance","xpos1","ypos1","xpos2","ypos2","sqrt","pow","Spiders","helper_functions","spiders","initialize","i","newSpider","push","destroy","spider","foundIdx","indexOf","splice","forEach","Player","bullets","keyBind","window","addEventListener","e","key","newBullet","fillRect","bullet","shift","Obstacle","counter","Obstacles","obstacles","newObstacle","includes","hit","obstacle","GameView","board","player","checkCollision","x1","y1","x2","y2","newBlock","dist","getHorizontalDistance","console","log","clearRect","requestAnimationFrame","bind","document","getElementById","getContext"],"sourceRoot":""}