{"version":3,"file":"main.js","mappings":"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","sources":["webpack://spiders/./src/scripts/board.js","webpack://spiders/./src/scripts/spider.js","webpack://spiders/./src/scripts/helper_functions.js","webpack://spiders/./src/scripts/spiders.js","webpack://spiders/./src/scripts/player.js","webpack://spiders/./src/scripts/bullet.js","webpack://spiders/./src/scripts/obstacle.js","webpack://spiders/./src/scripts/obstacles.js","webpack://spiders/./src/scripts/game-view.js","webpack://spiders/./src/index.js"],"sourcesContent":["class Board{\n    constructor(options){\n        this.color = 'black';\n    }\n\n    draw(ctx){\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, 700, 700);\n    }\n\n    drawLine(ctx){\n        ctx.fillStyle = \"gray\"\n        ctx.fillRect(0, 640, 700, 1);\n\n    }\n}\n\nexport default Board","export default class Spider{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.x_move = 2 * options.direction;\n        this.image = new Image();\n        this.image.src = './src/assets/centipede.png';\n\n    }\n\n    draw = function(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 20, 20);\n    }\n\n    move() {\n        this.x += this.x_move;\n    }\n\n    update() {\n        this.x_move = -this.x_move;\n        this.y += 20;\n    }\n}","export function setIntervalX(callback, delay, repetitions) {\n    var x = 0;\n    var intervalID = window.setInterval(function () {\n\n       callback();\n\n       if (++x === repetitions) {\n           window.clearInterval(intervalID);\n       }\n    }, delay);\n}\n\n\nexport function getRandomInt(min, max) {\n    return Math.floor((Math.random() * (max - min) + min) / 20) * 20;\n}\n \nexport function getDistance(xpos1, ypos1, xpos2, ypos2) {\n    let result = Math.sqrt(Math.pow(xpos2 - xpos1, 2) + Math.pow(ypos2 - ypos1, 2));\n    return result;\n}\n\nexport function getHorizontalDistance(xpos1, ypos1, xpos2, ypos2) {\n    if (ypos1 === ypos2) {\n        if (xpos1 < xpos2) {\n        return xpos2 - xpos1;\n            \n        } else if (xpos1 >= xpos2){\n        return xpos2 - xpos1;\n        }\n    }\n}\n\nexport function getRandom(max) {\n    return Math.floor(Math.random() * max);\n  }","import Spider from \"./spider\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Spiders {\n    constructor(options) {\n        this.x = helper_functions.getRandomInt(200, 500);\n        this.y = 0;\n        this.spiders = [];\n        this.direction = Math.pow(-1, helper_functions.getRandom(2));\n\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 10; i++) {\n            const newSpider = new Spider({\n                x: this.x + 20 * i * this.direction,\n                y: this.y,\n                direction: this.direction\n            })\n\n            this.spiders.push(newSpider);\n        }\n    }\n\n    destroy(spider) {\n        const foundIdx = this.spiders.indexOf(spider);\n        this.spiders.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        // console.log(this.spiders.length);\n        this.spiders.forEach(spider => {\n            if (spider.x > 680 || spider.x < 0) {\n                spider.update();\n            }\n            spider.move();\n            spider.draw(ctx);\n        });\n    }\n}\n\n","import Bullet from \"./bullet\";\n\nexport default class Player {\n    constructor(options) {\n        this.x = 350;\n        this.y = 675;\n        this.image = new Image();\n        this.image.src = './src/assets/player.png';\n        // this.color = 'green';\n        this.bullets = [];\n\n        this.keyBind();\n    }\n\n    keyBind() {\n        window.addEventListener('keydown', (e) => {\n            if (e.key == \"ArrowLeft\" || e.key == \"a\") {\n                if (this.x > 0)this.x -= 5;\n            } else if (e.key == \"ArrowRight\" || e.key == \"d\") {\n                if (this.x < 675) this.x += 5;\n            }else if (e.key == \"ArrowUp\" || e.key == \"w\") {\n                if (this.y >= 650) this.y -= 5;\n            } else if (e.key == \"ArrowDown\" || e.key == \"s\") {\n                if (this.y < 675) this.y += 5;\n            } else if (e.key == \" \") {\n                const newBullet = new Bullet({\n                    x: this.x, \n                    y: this.y\n                });\n                this.bullets.push(newBullet);\n            } else if (e.key == \"Control\") {\n                alert(\"Game in pause, press OK to continue\")\n            }\n        }, true);\n    }\n\n    destroy(bullet) {\n        const foundIdx = this.bullets.indexOf(bullet);\n        this.bullets.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 25, 25);\n\n        this.bullets.forEach(bullet => {\n            if (bullet.y <= -10) {\n                this.bullets.shift();\n            } else {\n                bullet.move();\n                bullet.draw(ctx);\n            }\n        });\n    }\n}","class Bullet{\n    constructor (options){\n        this.x = options.x;\n        this.y = options.y;\n        this.color = \"#49fb35\";\n    }\n\n    move() {\n        this.y -= 5;\n    }\n\n    draw = function(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x + 10, this.y, 5, 5);\n    }\n}\n\nexport default Bullet;","export default class Obstacle{\n    constructor (options) {\n        this.x = options.x;\n        this.y = options.y;\n        this.image = new Image();\n        this.image.src = './src/assets/mushroom1.png';\n        this.counter = 0;\n    }\n\n    draw = function(ctx) {\n        ctx.drawImage(this.image, this.x, this.y, 20, 20);\n    }\n}","import Obstacle from \"./obstacle\";\nimport * as helper_functions from \"./helper_functions\";\n\nexport default class Obstacles {\n    constructor(options) {\n        this.obstacles = [];\n        this.initialize();\n    }\n\n    initialize() {\n        for (let i = 0; i < 40; i++) {\n            const newObstacle = new Obstacle({\n                x: helper_functions.getRandomInt(20, 680),\n                y: helper_functions.getRandomInt(20, 640)\n            })\n\n            if (!this.obstacles.includes(newObstacle)) {\n                this.obstacles.push(newObstacle);\n            }\n        }\n    }\n\n    newBlock(x1, y1) {\n        let x = Math.floor(x1/20)*20;\n        let y = Math.floor(y1/20)*20;\n        const newObstacle = new Obstacle({x: x, y: y});\n        this.obstacles.push(newObstacle)\n    }\n\n    hit(obstacle) {\n        switch (obstacle.counter++) {\n            case 0:\n                obstacle.image.src = './src/assets/mushroom2.png';\n                break;\n            case 1:\n                obstacle.image.src = './src/assets/mushroom3.png';\n                break;\n            case 2:\n                obstacle.image.src = './src/assets/mushroom4.png';\n                break;\n            case 3:\n                this.destroy(obstacle);\n                break;\n        } \n    }\n\n    destroy(obstacle) {\n        const foundIdx = this.obstacles.indexOf(obstacle);\n        this.obstacles.splice(foundIdx, 1);\n    }\n\n    draw(ctx) {\n        this.obstacles.forEach(obstacle => {\n            obstacle.draw(ctx)\n        })\n    }\n}","import Board from \"./board.js\";\nimport Spiders from \"./spiders.js\";\nimport Player from './player';\nimport Obstacles from \"./obstacles.js\";\nimport { getDistance, getHorizontalDistance } from \"./helper_functions\";\n\nexport default class GameView {\n    constructor(options) {\n        this.board = new Board();\n        this.board2 = new Board();\n        this.spiders = new Spiders();\n        this.player = new Player();\n        this.obstacles = new Obstacles();\n        this.points = 0;\n        this.userpoints = document.getElementById(\"playerscore\");\n\n    }\n    \n\n    checkCollision() {\n        this.player.bullets.forEach(bullet => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist <= 10) {\n                    this.obstacles.hit(obstacle);\n                    this.points++;\n                    this.player.destroy(bullet);\n                }\n            });\n\n            this.spiders.spiders.forEach(spider => {\n                const [x1, y1] = [spider.x, spider.y];\n                const [x2, y2] = [bullet.x, bullet.y];\n                const dist = getDistance(x1, y1, x2, y2);\n                if (dist <= 10) {\n                    this.spiders.destroy(spider);\n                    this.player.destroy(bullet);\n                    this.obstacles.newBlock(x1, y1);\n                    this.points += 10;\n                    if (this.spiders.spiders.length === 0) {\n                        this.points += 100;\n                        alert(\"LEVEL PASS\");\n                    }\n                } \n            })\n        });\n\n        this.spiders.spiders.forEach(spider => {\n            this.obstacles.obstacles.forEach(obstacle => {\n                const [x1, y1] = [obstacle.x, obstacle.y]; \n                const [x2, y2] = [spider.x, spider.y];\n                const dist = getHorizontalDistance(x1, y1, x2, y2);\n                if (dist > 0 && dist < 20) {\n                    spider.y += 20;\n                    // spider.x_move = -spider.x_move\n                } else if (dist > -20 && dist < 0) {\n                    spider.y += 20;\n                    // spider.x_move = -spider.x_move\n\n                }\n            })\n        });\n\n    }\n\n    gameover() {\n        this.spiders.spiders.forEach(spider => {\n            if (spider.y > 620) {\n                window.cancelAnimationFrame\n                alert(\"GAME OVER\");\n            }\n        });\n    }\n    \n    draw(ctx) {\n        this.userpoints.textContent = `Points: ${this.points}`;\n\n        ctx.clearRect(0, 0, 700, 700);\n        this.board.draw(ctx);\n        this.board2.drawLine(ctx);\n        this.obstacles.draw(ctx);\n        this.player.draw(ctx);\n        this.spiders.draw(ctx);\n        this.checkCollision();\n\n        this.gameover();\n        requestAnimationFrame(this.draw.bind(this, ctx));\n    }\n    \n}","import GameView from \"../src/scripts/game-view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const canvas = document.getElementById('board-canvas');\n    const ctx = canvas.getContext(\"2d\");\n\n    const gameview = new GameView()\n    gameview.draw(ctx);\n\n});"],"names":["constructor","options","this","color","draw","ctx","fillStyle","fillRect","drawLine","Spider","x","y","x_move","direction","image","Image","src","drawImage","move","update","getRandomInt","min","max","Math","floor","random","getDistance","xpos1","ypos1","xpos2","ypos2","sqrt","pow","Spiders","helper_functions","spiders","initialize","i","newSpider","push","destroy","spider","foundIdx","indexOf","splice","forEach","Player","bullets","keyBind","window","addEventListener","e","key","newBullet","alert","bullet","shift","Obstacle","counter","Obstacles","obstacles","newObstacle","includes","newBlock","x1","y1","hit","obstacle","GameView","board","Board","board2","player","points","userpoints","document","getElementById","checkCollision","x2","y2","length","dist","getHorizontalDistance","gameover","cancelAnimationFrame","textContent","clearRect","requestAnimationFrame","bind","getContext"],"sourceRoot":""}