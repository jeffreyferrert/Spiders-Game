!function(){"use strict";!function(){class t{constructor(t){this.x=t.x,this.y=t.y,this.x_move=5,this.radius=10,this.color="brown"}draw=function(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fill()};move(){this.x+=this.x_move}update(){this.x_move=-this.x_move,this.y+=20}}function s(t,s){return Math.floor(Math.random()*(s-t)+t)}class i{constructor(t){this.x=s(210,700),this.y=10,this.color="brown",this.spiders=[],this.initialize()}initialize(){for(let s=0;s<10;s++){const i=new t({x:this.x-20*s,y:this.y});this.spiders.push(i)}}draw(t){this.spiders.forEach((s=>{(s.x>=700||s.x<0)&&s.update(),s.move(),s.draw(t)}))}}class e{constructor(t){this.x=350,this.y=670,this.color="green",this.bullets=[],this.keyBind()}keyBind(){window.addEventListener("keydown",(t=>{if("ArrowLeft"==t.key||"a"==t.key)this.x-=10;else if("ArrowRight"==t.key||"d"==t.key)this.x+=10;else if("ArrowUp"==t.key||"w"==t.key)this.y-=10;else if("ArrowDown"==t.key||"s"==t.key)this.y+=10;else if(" "==t.key){const t=new class{constructor(t){this.x=t.x,this.y=t.y,this.color="green"}move(){this.y-=10}draw=function(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,10,10)}}({x:this.x,y:this.y});this.bullets.push(t)}}),!0)}draw(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,25,25),this.bullets.forEach((s=>{s.y<=-10?this.bullets.shift():(s.move(),s.draw(t))}))}}class o{constructor(t){this.x=t.x,this.y=t.y,this.color="gray"}draw=function(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,20,20)}}class h{constructor(t){this.obstacles=[],this.initialize()}initialize(){for(let t=0;t<20;t++){const t=new o({x:s(30,670),y:s(20,650)});this.obstacles.includes(t)||this.obstacles.push(t)}}destroy(t){const s=this.obstacles.indexOf(t);this.obstacles.splice(s,1)}draw(t){this.obstacles.forEach((s=>{s.draw(t)}))}}class r{constructor(t){this.board=new class{constructor(t){this.color="black"}draw(t){t.fillStyle=this.color,t.fillRect(0,0,700,700)}},this.spiders=new i,this.player=new e,this.obstacles=new h}checkCollision(){this.player.bullets.forEach((t=>{this.obstacles.obstacles.forEach((s=>{const[i,e]=[s.x,s.y],[o,h]=[t.x,t.y];var r,l,c,a;r=i,l=e,c=o,a=h,Math.sqrt(Math.pow(c-r,2)+Math.pow(a-l,2))<20&&this.obstacles.destroy(s)}))}))}draw(t){t.clearRect(0,0,700,700),this.board.draw(t),this.obstacles.draw(t),this.player.draw(t),this.spiders.draw(t),this.checkCollision(),requestAnimationFrame(this.draw.bind(this,t))}}document.addEventListener("DOMContentLoaded",(function(){const t=document.getElementById("board-canvas").getContext("2d");(new r).draw(t)}))}()}();
//# sourceMappingURL=main.js.map